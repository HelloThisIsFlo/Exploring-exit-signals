Results: 
    SIGKILL:
        Sigkill kill without any warning the targeted process.
        But kills ONLY the targeted process. No cascade !!
        Not possible to trap.
        If process has childrens, they become orphans. (And get attached to init (pid 1))

Random notes:
    Cannot kill SIGKILL PID1 on Docker. 
    But no problem kill with SIGTERM (graceful shutdown)

Note: 
    Docker`kill`vs`exec kill`:
        PID1:
            To directly send a kill signal to the process PID1 of a container
            => Use `docker kill --signal SIGXXX CONTAINER`

            For other processes 
            => Use `docker exec CONTAINER kill -X PID`

            For PID1 the difference in using `kill -signal=SIGXX` and `exec kill -SIGXX 1`
            => Can NOT send a SIGKILL to PID1 from inside the container.
            => No problems with other signals SIGINT/SIGTERM (Graceful shutdown)
        Default:
            Without arguments `docker kill` sends a SIGKILL.
            Without arguments `docker exec kill` sends a SIGTERM.
    StandardOutputOnDetachedMode:
        To view standard output on detached mode
        => Use `docker logs puzzle`
        => `-f` option to follow in real time
    PID1OnDocker:
        When the PID1 is killed, the docker container is destroyed.
        No matter if orphan processes are still there.

sleep.sh:
    In Terminal:
        (cli):
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
            SIGTERM Base:
                SIGTERM TRAPPED by sleep.sh
            SIGTERM Nested:
                NOT APPLICABLE

    In Docker: 
        run -it:
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
            SIGTERM Base (docker kill --signal SIGTERM):
                SIGTERM TRAPPED by sleep.sh
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                SIGTERM TRAPPED by sleep.sh

        run:
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
            SIGTERM Base:
                SIGTERM TRAPPED by sleep.sh
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                SIGTERM TRAPPED by sleep.sh

        run -d:
            CTRL-C:
                NOT APPLICABLE
            SIGTERM Base:
                SIGTERM TRAPPED by sleep.sh
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                SIGTERM TRAPPED by sleep.sh


exec sleep.sh:
    In Terminal:
        (cli):
            Same as `sleep.sh` (without `exec`)

    In Docker: 
        run -it:
            Same as `sleep.sh` (without `exec`)

        run:
            Same as `sleep.sh` (without `exec`)

        run -d:
            Same as `sleep.sh` (without `exec`)


trap.sh -> sleep.sh:
    In Terminal:
        (cli):
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
                Then
                SIGINT TRAPPED by trap.sh
            SIGTERM Base:
                Nothing happens !!
                SIGTERM `trap.sh` but still waiting on `sleep.sh`
            SIGTERM Nested:
                SIGINT TRAPPED by `sleep.sh`
                Then
                `trap.sh` exits normally

    In Docker: 
        run -it:
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
                Then
                SIGINT TRAPPED by trap.sh
            SIGTERM Base:
                Nothing happens !!
                SIGTERM `trap.sh` but still waiting on `sleep.sh`
            SIGTERM Nested:
                SIGINT TRAPPED by `sleep.sh`
                Then
                `trap.sh` exits normally
            Docker stop:
                Send SIGTERM, nothing happens. 
                SIGTERM only sent to PID1 with `docker stop`
                PID1=`trap.sh` still waiting on `sleep.sh`

                THEN after delay
                Send SIGKILL, `trap.sh` is killed and container is destroyed

        run:
            CTRL-C:
                Nothing happens !!
                Without `-it` option, signals only sent to PID1 !!
                SIGINT `trap.sh`(PID1) but still waiting on `sleep.sh`
            SIGTERM Base:
                Nothing happens !!
                SIGTERM `trap.sh` but still waiting on `sleep.sh`
            SIGTERM Nested:
                SIGINT TRAPPED by `sleep.sh`
                Then
                `trap.sh` exits normally
            Docker stop:
                Send SIGTERM, nothing happens. 
                SIGTERM only sent to PID1 with `docker stop`
                PID1=`trap.sh` still waiting on `sleep.sh`

                THEN after delay
                Send SIGKILL, `trap.sh` is killed and container is destroyed

        run -d:
            CTRL-C:
                NOT APPLICABLE
            SIGTERM Base:
                SIGTERM `trap.sh` but still waiting on `sleep.sh`
            SIGTERM Nested:
                SIGINT TRAPPED by `sleep.sh`
                Then
                `trap.sh` exits normally
            Docker stop:
                Send SIGTERM, nothing happens. 
                SIGTERM only sent to PID1 with `docker stop`
                PID1=`trap.sh` still waiting on `sleep.sh`

                THEN after delay
                Send SIGKILL, `trap.sh` is killed and container is destroyed


exec trap.sh -> sleep.sh:
    In Terminal:
        (cli):
            Same as `trap.sh -> sleep.sh` (without `exec`)

    In Docker: 
        run -it:
            Same as `trap.sh -> sleep.sh` (without `exec`)

        run:
            Same as `trap.sh -> sleep.sh` (without `exec`)

        run -d:
            Same as `trap.sh -> sleep.sh` (without `exec`)


trap.sh -> exec sleep.sh:
    In Terminal:
        (cli):
            CTRL-C:
                SIGINT TRAPPED by sleep.sh
                But then nothing happens!!
                This is because exec REPLACED the current process with the new one.
                It replaced `trap.sh` with `sleep.sh`
                All the lines AFTER `exec` will never run
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
        CTRL-C:
            Explain what happens here. Bla bla bla
        SIGTERM Base:
            Explain what happens here. Bla bla bla
        SIGTERM Nested:
            NOT APPLICABLE

    In Docker: 
        run -it:
            CTRL-C:
                Here is what happens :D :D 
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd

        run:
            CTRL-C:
                Here is what happens :D :D 
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd

        run -d:
            CTRL-C:
                NOT APPLICABLE
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd


exec trap.sh -> exec sleep.sh:
    In Terminal:
        (cli):
            CTRL-C:
                Explain what happens here. Bla bla bla
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE

    In Docker: 
        run -it:
            CTRL-C:
                Here is what happens :D :D 
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd

        run:
            CTRL-C:
                Here is what happens :D :D 
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd

        run -d:
            CTRL-C:
                NOT APPLICABLE
            SIGTERM Base:
                Explain what happens here. Bla bla bla
            SIGTERM Nested:
                NOT APPLICABLE
            Docker stop:
                asdfasd

